// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  chats     Chat[]
  starred   Starred[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Chat {
  id         String    @id @default(uuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages   Message[]
  createdAt  DateTime  @default(now())
}

model Message {
  id        String    @id @default(uuid())
  chatId    String
  chat      Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender    MessageSender
  content   String
  llm       String?   // Stores the LLM used (if AI generated)
  createdAt DateTime  @default(now())
  starred   Starred[]
  status    MessageStatus
  @@index([chatId])
}

enum MessageSender {
  USER
  AI
}

enum MessageStatus {
  PENDING
  INTERRUPTED
  COMPLETED
}

model Starred {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messageId String
  message   Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  llm       String?   // Store the LLM used
  createdAt DateTime  @default(now())

  @@unique([userId, messageId]) // Prevent duplicate starring
}
